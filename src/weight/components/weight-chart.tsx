import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import {
  Area,
  AreaChart,
  ResponsiveContainer,
  Tooltip,
  XAxis,
  YAxis,
  ReferenceLine,
} from "recharts";

interface WeightChartProps {
  period: "W" | "M" | "Y" | "5Y";
}

interface TooltipPayload {
  payload: {
    weight: number;
    label: string;
  };
}

export default function WeightChart({ period }: WeightChartProps) {
  const [currentWeight] = useState(75.5);
  const [targetWeight] = useState(73.0); // –¶–µ–ª–µ–≤–æ–π –≤–µ—Å

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä–∏–æ–¥–∞
  const getDataForPeriod = (period: "W" | "M" | "Y" | "5Y") => {
    switch (period) {
      case "W":
        // –î–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
        return [
          { label: "–ü–Ω", weight: 76.2 },
          { label: "–í—Ç", weight: 76.0 },
          { label: "–°—Ä", weight: 75.8 },
          { label: "–ß—Ç", weight: 75.6 },
          { label: "–ü—Ç", weight: 75.4 },
          { label: "–°–±", weight: 75.3 },
          { label: "–ù–¥", weight: 75.5 },
        ];
      case "M":
        // –î–∞–Ω–Ω—ã–µ –ø–æ –º–µ—Å—è—Ü–∞–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤)
        return [
          { label: "–õ—é—Ç", weight: 78.5 },
          { label: "–ë–µ—Ä", weight: 77.8 },
          { label: "–ö–≤—ñ", weight: 77.2 },
          { label: "–¢—Ä–∞", weight: 76.5 },
          { label: "–ß–µ—Ä", weight: 76.0 },
          { label: "–õ–∏–ø", weight: 75.5 },
        ];
      case "Y":
        // –î–∞–Ω–Ω—ã–µ –ø–æ –≥–æ–¥–∞–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –≥–æ–¥–∞)
        return [
          { label: "2023", weight: 80.2 },
          { label: "2024", weight: 77.8 },
          { label: "2025", weight: 75.5 },
        ];
      case "5Y":
        // –î–∞–Ω–Ω—ã–µ –∑–∞ 5 –ª–µ—Ç
        return [
          { label: "2021", weight: 85.0 },
          { label: "2022", weight: 82.5 },
          { label: "2023", weight: 80.2 },
          { label: "2024", weight: 77.8 },
          { label: "2025", weight: 75.5 },
        ];
      default:
        return [];
    }
  };

  const data = getDataForPeriod(period);
  const weights = data.map((d) => d.weight);
  const maxWeight = Math.max(...weights, targetWeight);
  const minWeight = Math.min(...weights, targetWeight);

  // –ö–∞—Å—Ç–æ–º–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ç—É–ª—Ç–∏–ø–∞
  const CustomTooltip = ({
    active,
    payload,
  }: {
    active?: boolean;
    payload?: TooltipPayload[];
  }) => {
    if (active && payload && payload.length) {
      const data = payload[0].payload;
      return (
        <div className="bg-background border border-border rounded-lg p-3 shadow-lg">
          <p className="text-sm font-medium">{data.label}</p>
          <p className="text-sm text-blue-500">
            –í–∞–≥–∞:{" "}
            <span className="font-semibold">{data.weight.toFixed(1)} –∫–≥</span>
          </p>
        </div>
      );
    }
    return null;
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="text-sm text-muted-foreground font-normal">
          –í–∞–≥–∞
        </CardTitle>
        <div className="flex items-baseline gap-1">
          <p className="text-4xl font-light text-blue-500 tabular-nums">
            {currentWeight.toFixed(1)}
          </p>
          <span className="text-lg text-muted-foreground">–∫–≥</span>
        </div>
      </CardHeader>

      <CardContent>
        {/* –ì—Ä–∞—Ñ–∏–∫ –≤–µ—Å–∞ —Å Recharts */}
        <div className="h-40 mb-3">
          <ResponsiveContainer width="100%" height="100%">
            <AreaChart
              data={data}
              margin={{
                top: 10,
                right: 0,
                left: 0,
                bottom: 0,
              }}
            >
              <defs>
                <linearGradient id="weightGradient" x1="0" y1="0" x2="0" y2="1">
                  <stop
                    offset="5%"
                    stopColor="hsl(217, 91%, 60%)"
                    stopOpacity={0.3}
                  />
                  <stop
                    offset="95%"
                    stopColor="hsl(217, 91%, 60%)"
                    stopOpacity={0.05}
                  />
                </linearGradient>
              </defs>

              <XAxis
                dataKey="label"
                axisLine={false}
                tickLine={false}
                tick={{ fontSize: 12, fill: "hsl(var(--muted-foreground))" }}
                hide
              />

              <YAxis
                domain={[minWeight - 1, maxWeight + 1]}
                axisLine={false}
                tickLine={false}
                tick={{ fontSize: 12, fill: "hsl(var(--muted-foreground))" }}
                hide
              />

              <Tooltip content={<CustomTooltip />} />

              {/* –¶—ñ–ª—å–æ–≤–∞ –ª—ñ–Ω—ñ—è */}
              <ReferenceLine
                y={targetWeight}
                stroke="hsl(142, 71%, 45%)"
                strokeDasharray="5 5"
                strokeWidth={2}
                label={{
                  value: `–¶—ñ–ª—å ${targetWeight}–∫–≥`,
                  position: "top",
                  style: {
                    fontSize: "12px",
                    fill: "hsl(142, 71%, 45%)",
                    fontWeight: "500",
                  },
                }}
              />

              <Area
                type="monotone"
                dataKey="weight"
                stroke="hsl(217, 91%, 60%)"
                strokeWidth={3}
                fill="url(#weightGradient)"
                dot={{
                  r: 4,
                  fill: "hsl(217, 91%, 60%)",
                  stroke: "white",
                  strokeWidth: 2,
                }}
                activeDot={{
                  r: 6,
                  fill: "hsl(217, 91%, 60%)",
                  stroke: "white",
                  strokeWidth: 2,
                }}
              />
            </AreaChart>
          </ResponsiveContainer>
        </div>

        {/* –ü–æ–¥–ø–∏—Å–∏ –ø–µ—Ä–∏–æ–¥–æ–≤ */}
        <div className="flex justify-between text-xs text-muted-foreground mb-4">
          <span>{data[0]?.label}</span>
          <span>{data[data.length - 1]?.label}</span>
        </div>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è */}
        {data.length > 1 && (
          <div className="pt-3 border-t border-border space-y-2">
            <div className="flex justify-between text-sm">
              <div>
                <span className="text-muted-foreground">–ó–º—ñ–Ω–∞: </span>
                <span
                  className={`font-medium ${
                    data[data.length - 1].weight < data[0].weight
                      ? "text-green-600"
                      : data[data.length - 1].weight > data[0].weight
                      ? "text-red-500"
                      : "text-muted-foreground"
                  }`}
                >
                  {data[data.length - 1].weight < data[0].weight ? "-" : "+"}
                  {Math.abs(
                    data[data.length - 1].weight - data[0].weight
                  ).toFixed(1)}{" "}
                  –∫–≥
                </span>
              </div>
              <div>
                <span className="text-muted-foreground">–î—ñ–∞–ø–∞–∑–æ–Ω: </span>
                <span className="font-medium">
                  {minWeight.toFixed(1)} - {maxWeight.toFixed(1)} –∫–≥
                </span>
              </div>
            </div>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–ª–∏ */}
            <div className="flex justify-between text-sm">
              <div>
                <span className="text-muted-foreground">–î–æ —Ü—ñ–ª—ñ: </span>
                <span
                  className={`font-medium ${
                    currentWeight <= targetWeight
                      ? "text-green-600"
                      : "text-orange-600"
                  }`}
                >
                  {currentWeight <= targetWeight
                    ? "–¶—ñ–ª—å –¥–æ—Å—è–≥–Ω—É—Ç–∞! üéâ"
                    : `${(currentWeight - targetWeight).toFixed(1)} –∫–≥`}
                </span>
              </div>
              <div>
                <span className="text-muted-foreground">–¶—ñ–ª—å: </span>
                <span className="font-medium text-green-600">
                  {targetWeight.toFixed(1)} –∫–≥
                </span>
              </div>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
}
